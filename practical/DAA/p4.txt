public static int knapsack01Memo(int val[], int wt[], int W, int n, int dp[][]){
        // here we are iterating items from 0 to n = val.length
        if(W == 0 || n == val.length){
            return 0;
        }
        if(dp[n][W] != -1){ // already calculated
            return dp[n][W];
        }
        if(wt[n] <= W){     // valid
            // include
            int ans1 = val[n] + knapsack01Memo(val, wt, W-wt[n], n+1, dp);
            // exclude 
            int ans2 = knapsack01Memo(val, wt, W, n+1, dp);
            dp[n][W] = Math.max(ans1, ans2);
            return dp[n][W];
        }else{      // not valid
            dp[n][W] = knapsack01Memo(val, wt, W, n+1, dp);
            return dp[n][W];
        }
    }

    public static void main(String[] args) {
        int val[] = {15, 14, 10, 45, 30};
        int wt[] = {2, 5, 1, 3, 4};
        int W = 7;
        // By Memoization O(n*W)
        int dp[][] = new int[val.length + 1][W+1];
        for(int i=0; i<dp.length; i++){
            for(int j=0; j<dp[0].length; j++){
                dp[i][j] = -1;
            }
        }
        System.out.println(knapsack01Memo(val, wt, W, 0, dp));
    }